<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agam&#39;s Mashed-Up Pome</title>
    <link>http://agam.github.io/</link>
    <description>Recent content on Agam&#39;s Mashed-Up Pome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Sep 2016 22:18:03 -0700</lastBuildDate>
    <atom:link href="http://agam.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Prog/Math/Sci summary: August 2016</title>
      <link>http://agam.github.io/post/prog-math-sci-summary-aug-2016/</link>
      <pubDate>Thu, 08 Sep 2016 22:18:03 -0700</pubDate>
      
      <guid>http://agam.github.io/post/prog-math-sci-summary-aug-2016/</guid>
      <description>&lt;p&gt;Some interesting stuff, in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I didn&amp;rsquo;t know Knuth even &lt;em&gt;had&lt;/em&gt; a book on Surreal numbers, but here&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:knuth&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:knuth&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is his humorous recounting of how it was written.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There&amp;rsquo;s always more room at the bottom &amp;hellip; this Economist article&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:storage&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:storage&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; mentions a recent breakthrough, where scientists were able to store a paragraph of text on individual atoms at the relatively not-so-cold temperature of -196 degress celsius.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;James Noble of &lt;a href=&#34;http://homepages.mcs.vuw.ac.nz/~kjx/papers/nopp.pdf&#34;&gt;&amp;ldquo;Notes on Post-Modern programming&amp;rdquo;&lt;/a&gt; returns with a sequel&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:postmodern&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:postmodern&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I&amp;rsquo;m always interested in posssible zones of &amp;ldquo;incommensurability&amp;rdquo; in computer science, and most of such things have to do with people disagreeing&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:types&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:types&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; on what &amp;ldquo;types&amp;rdquo; mean &amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip; but occasionally disagreeing more broadly&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:paradigms&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:paradigms&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, about what computer science &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There has to be &lt;em&gt;some&lt;/em&gt; depressing link shared every month, so here&amp;rsquo;s&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:feudal&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:feudal&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; a discussion of trust and power in today&amp;rsquo;s Internet.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, everything old is going to be new again&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:mainframe&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:mainframe&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;, and vice versa, so there isn&amp;rsquo;t really anything to worry about, unless you want to, that is. Hardware becomes softwre becomes hardware, general becomes specific becomes general, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:knuth&#34;&gt;Youtube.com, &lt;a href=&#34;https://www.youtube.com/watch?v=mPn2AdMH7UQ&#34;&gt;&lt;em&gt;&amp;ldquo;Surreal numbers: writing the first book&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:knuth&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:storage&#34;&gt;Economist, &lt;a href=&#34;http://www.economist.com/news/science-and-technology/21702343-individual-atoms-offer-ultra-dense-information-storage-atoms-and-voids&#34;&gt;&lt;em&gt;&amp;ldquo;Atoms and the voids&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:storage&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:postmodern&#34;&gt;Youtube, &lt;a href=&#34;https://www.youtube.com/watch?v=a5Q7td6t-iw&#34;&gt;&lt;em&gt;&amp;ldquo;James Noble: Notes on Post-Post-Modern-Modern Programming&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:postmodern&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:types&#34;&gt;Birmingham theory group, &lt;a href=&#34;http://researchblogs.cs.bham.ac.uk/thelablunch/2015/06/types-computation-vs-interaction/&#34;&gt;&lt;em&gt;&amp;ldquo;Types: computation vs. interaction&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:types&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:paradigms&#34;&gt;Amnon Eden, &lt;a href=&#34;http://www.eden-study.org/articles/2007/three_paradigms_of_computer_science.pdf&#34;&gt;&lt;em&gt;&amp;ldquo;Three paradigms of Computer Science&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:paradigms&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:feudal&#34;&gt;&lt;a href=&#34;Co:llaboratory&#34;&gt;Co:llaboratory&lt;/a&gt;, &lt;a href=&#34;http://en.collaboratory.de/w/Power_in_the_Age_of_the_Feudal_Internet&#34;&gt;&lt;em&gt;&amp;ldquo;Power in the Age of the Feudal Internet&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:feudal&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:mainframe&#34;&gt;Rudolf Winestock, &lt;a href=&#34;http://www.winestockwebdesign.com/Essays/Lisp_Curse.html&#34;&gt;&lt;em&gt;&amp;ldquo;The Eternal Mainframe&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:mainframe&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>prog math sci summary july 2016</title>
      <link>http://agam.github.io/post/prog-math-sci-summary-july-2016/</link>
      <pubDate>Wed, 27 Jul 2016 22:04:47 -0700</pubDate>
      
      <guid>http://agam.github.io/post/prog-math-sci-summary-july-2016/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once again, I start with something for old-timers: here is the original marketing pre-development pitch&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:diablo&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:diablo&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for the first &lt;em&gt;Diablo&lt;/em&gt; game (an old time sink).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This trip&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:reddit-math&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:reddit-math&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; goes on my bucket list: visiting the places Gauss, Hilbert, Planck etc. lived in.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Decentralized Web Summit was held late last month, and I recommend watching atleast the initial few talks&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e-g-Vint-Cerf-Tim-Berners-Lee&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e-g-Vint-Cerf-Tim-Berners-Lee&#34;&gt;0&lt;/a&gt;&lt;/sup&gt; &amp;hellip; and particularly relevant if you believed in the promises of the 90s.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Some people are hard to classify. Is Terry Davis deranged or brilliant or both? Read this article&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:davis&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:davis&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; and decide for yourself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Davis emails me regularly and late into the night, in Courier font, from a two or three year-old Dell desktop running Ubuntu. Unable to work, he collects Social Security disability and spends most of his time coding, web surfing, or &lt;strong&gt;using the output from the National Institute of Standards and Technology randomness beacon to talk to God&lt;/strong&gt; — he posts the results on his webpage as &amp;ldquo;Terry Davis’ Rants.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;He drinks a lot of caffeine and lives mostly on a 48-hour schedule: &amp;ldquo;I stay awake 16 * 2 and sleep 8 * 2.&amp;rdquo; He shares a house with his parents and a pair of cockatiels. Of his parents he says, &amp;ldquo;We don&amp;rsquo;t interact that much.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you&amp;rsquo;re not familiar with Forth or Chuck Moore (or even if you are), you might like this&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:forth&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:forth&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; iconoclastic essay.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;My long-form recommendation&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:long&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:long&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; of the month: it covers the breadth and depth of &amp;ldquo;programming&amp;rdquo;, the old and the new, all with nostalgic images from the recent past and the not-so-recent past.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A short take on Scheme vs Python&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:scheme-python&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:scheme-python&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &amp;ldquo;archaeological&amp;rdquo; snippet of the month: the source code for the Apollo 11 Guidance Computer, available&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:as-everything-else-these-days&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:as-everything-else-these-days&#34;&gt;0&lt;/a&gt;&lt;/sup&gt; on Github.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choice extract (lines 251-255 of &lt;code&gt;THE_LUNAR_LANDING.agc&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;P63SPOT4	TC	BANKCALL	# ENTER		INITIALIZE LANDING RADAR
            CADR	SETPOS1

            TC		POSTJUMP	# OFF TO SEE THE WIZARD ...
            CADR	BURNBABY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(I&amp;rsquo;ll leave you to consider the &amp;ldquo;advantages&amp;rdquo; we enjoy in our &amp;ldquo;high-level&amp;rdquo; languages today)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This person points&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:broken&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:broken&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; out the obvious but painful truth: software is broken because &lt;em&gt;we&amp;rsquo;re ok with it being broken&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ok, another archaeological post (sorry!): this one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:slug&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:slug&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; is from the archives of the Symbolics Lisp Users Group (SLUG), 25 years ago. I won&amp;rsquo;t summarize it, read it if you care about that sort of thing &amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Quanta magazine is turning out to be my go-to source of cool science-y stuff. This one is about certain patterns&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:quanta&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:quanta&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; common to bird&amp;rsquo;s eyes, shaken marbles, and certain emulsions, a pattern called &lt;em&gt;hyperuniformity&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I&amp;rsquo;m still not sure whether Wolfram&amp;rsquo;s &lt;em&gt;New Kind of Science&lt;/em&gt; was excellent or just &lt;em&gt;meh&lt;/em&gt; (or, lookup TODO&amp;rsquo;s one-word review), but here&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:wolfram&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:wolfram&#34;&gt;10&lt;/a&gt;&lt;/sup&gt; is a collection of a bunch of reviews and commentary on it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Today, Java is this verbose, enterprise-y language, but there were many twists and turns along the way&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:java&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:java&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;, some of them quite unexpected.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I first met James Gosling in the spring of 1988. He was wearing an ill-fitting white T-shirt with an obscure reference to Jean Paul Sartre&amp;rsquo;s cat. He wasn&amp;rsquo;t wearing shoes, and his socks didn&amp;rsquo;t quite match. His large corner office in building 14 of Sun&amp;rsquo;s Mountain View campus was crowded with piles of books and papers strewn about. His Sun &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;60&lt;/sub&gt; had a &amp;ldquo;Macintosh Test Drive&amp;rdquo; bumper sticker on the side of the monitor. He had nice art on his walls. Not the typical hacker dinosaurs and free posters from Usenix conferences, but real Japanese pen and ink prints. His bookshelf was full of the classics of computer science. Horowitz, Knuth, Foley and Van Dam, Xerox bluebooks, SIGGRAPH and OOPSLA proceedings, the collected works of Breathed and Larson. &lt;strong&gt;Clearly, James was not your garden variety programmer.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We&amp;rsquo;re used to a certain genre of examples in programming textbooks, which is why when someone goes out of their way[^political] to create politically charged test cases, it &amp;hellip; uh &amp;hellip; stands out, especially if you do it in a popular Oreilly book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is either funny, or deep, or banal, I can&amp;rsquo;t decide &amp;hellip; apparently there are clues&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:borges&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:borges&#34;&gt;12&lt;/a&gt;&lt;/sup&gt; in a Borges story that refer to the Object-Oriented vs Functional Programming debate of today (in my opinion though, this is just because the links between natural languages and programming languages aren&amp;rsquo;t well understood enough).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(once again, cross-posted to &lt;a href=&#34;https://medium.com/@agam&#34;&gt;Medium&lt;/a&gt; and the regular &lt;a href=&#34;http://agam.github.io/&#34;&gt;blog&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:diablo&#34;&gt;&lt;em&gt;Diablo&lt;/em&gt;, &lt;a href=&#34;http://www.graybeardgames.com/download/diablo_pitch.pdf&#34;&gt;game concept by Condor Inc&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:diablo&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:reddit-math&#34;&gt;Math Reddit, &lt;a href=&#34;https://www.reddit.com/r/math/comments/4o6m2z/history_of_mathematics_backpacking_trip_in_germany/&#34;&gt;&lt;em&gt;&amp;ldquo;History of Mathematics backpacking trip&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:reddit-math&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:davis&#34;&gt;Motherboard, &lt;a href=&#34;http://motherboard.vice.com/read/gods-lonely-programmer&#34;&gt;&lt;em&gt;&amp;ldquo;God&amp;rsquo;s Lonely Programmer&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:davis&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:forth&#34;&gt;Jeff Fox, &lt;a href=&#34;http://www.ultratechnology.com/lowfat.htm&#34;&gt;&lt;em&gt;&amp;ldquo;Low Fat Computing&amp;rdquo;&lt;/em&gt;&lt;/a&gt; (1998)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:forth&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:long&#34;&gt;Medium, &lt;a href=&#34;https://medium.com/@thi.ng/the-jacob-s-ladder-of-coding-4b12477a26c1&#34;&gt;&lt;em&gt;&amp;ldquo;The Jacob&amp;rsquo;s Ladder of coding&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:long&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:scheme-python&#34;&gt;Brian Harvey, &lt;a href=&#34;https://people.eecs.berkeley.edu/~bh/proglang.html&#34;&gt;&lt;em&gt;&amp;ldquo;Scheme vs. Python&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:scheme-python&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:broken&#34;&gt;SAPM Course Blog, &lt;a href=&#34;https://blog.inf.ed.ac.uk/sapm/2014/03/14/we-could-write-nearly-perfect-software-but-we-choose-not-to/&#34;&gt;&lt;em&gt;&amp;ldquo;We could write nearly perfect software but we choose not to&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:broken&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:slug&#34;&gt;Symbolics Lisp Users Group, &lt;a href=&#34;ftp://ftp.ai.sri.com/pub/mailing-lists/slug/910630/msg00107.html&#34;&gt;&lt;em&gt;&amp;ldquo;C vs. Lisp, or UNIX vs. Genera, or just US vs. THEM. Cuckoo?&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:slug&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:quanta&#34;&gt;Quanta magazine, &lt;a href=&#34;https://www.quantamagazine.org/20160712-hyperuniformity-found-in-birds-math-and-physics/&#34;&gt;&lt;em&gt;&amp;ldquo;A Bird’s-Eye View of Nature’s Hidden Order&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:quanta&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:wolfram&#34;&gt;W. Edwin Clark, &lt;a href=&#34;http://shell.cas.usf.edu/~wclark/ANKOS_reviews.html&#34;&gt;&lt;em&gt;&amp;ldquo;Collection of reviews of Wolfram&amp;rsquo;s A New Kind of Science&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:wolfram&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:java&#34;&gt;Blinkenlights, &lt;a href=&#34;http://www.blinkenlights.com/classiccmp/javaorigin.html&#34;&gt;&lt;em&gt;&amp;ldquo;The long strange road to Java&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:java&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:borges&#34;&gt;Jan vs Machine, &lt;a href=&#34;http://www.janvsmachine.net/2013/09/did-borges-predict-oo-vs-functional.html&#34;&gt;&lt;em&gt;&amp;ldquo;Did Borges predict the OO vs functional programming debate?&amp;rdquo;&lt;/em&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:borges&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>random snippets 1</title>
      <link>http://agam.github.io/post/random-snippets-1/</link>
      <pubDate>Thu, 30 Jun 2016 21:44:34 -0700</pubDate>
      
      <guid>http://agam.github.io/post/random-snippets-1/</guid>
      <description>&lt;p&gt;(This is a new thing where I bunch up mini-posts, or &lt;em&gt;snippets&lt;/em&gt;, and
share them as a single post here. I guess the alternative would be a
single post at Tumblr, but I&amp;rsquo;d rather keep everything in one place,
for personal sanity. Perhaps later I&amp;rsquo;ll cross-post this on Medium&amp;hellip;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nathan Marz, in an interview with &amp;ldquo;Programmer Magazine&amp;rdquo;,
&lt;a href=&#34;http://nathanmarz.com/blog/interview-with-programmer-magazine.html&#34;&gt;relates&lt;/a&gt; this experience:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;I talked with John McCarthy for two hours when I was a sophomore in college. The most striking thing he told me was when I asked about the history of Lisp. He told me he needed a better programming language for doing AI research, so he invented Lisp for that purpose. He really didn&amp;rsquo;t seem to care that much about programming languages – his real passion was AI. It struck me as exactly like how Isaac Newton invented calculus because he needed it for his physics work. &lt;strong&gt;The pebbles of giants really are big boulders.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;The HackerNews &lt;a href=&#34;https://news.ycombinator.com/item?id=11933427&#34;&gt;discussion&lt;/a&gt; on a &lt;a href=&#34;http://spectrum.ieee.org/view-from-the-valley/telecom/internet/the-fathers-of-the-internet-revolution-urge-todays-pioneers-to-reinvent-the-web&#34;&gt;recent article&lt;/a&gt; featured the
following comment:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;The Web has already been reinvented, but not in the direction that Bernars-Lee wants. We have HTTP2 running everything through one pipe to big sites. We have Javascript that puts the site in control of the user&amp;rsquo;s machine and makes web pages display-only, like PostScript. More than half of all traffic is coming from the top 10 sites. &lt;strong&gt;The federated systems, email, IRC, and Usenet, have been replaced by Gmail, WhatsApp, and Facebook&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Did you know that Tim O&amp;rsquo;Reilly (of the website and the book series,
etc) was a huge fan of &lt;em&gt;Dune&lt;/em&gt;?!
&lt;a href=&#34;http://www.oreilly.com/tim/herbert/intro.html&#34;&gt;Here&lt;/a&gt; is his own
confession (tl;dr: he wrote a whole book about it!). The following
is an extract from chapter 8, _&amp;ldquo;Transcending the Human&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Herbert&amp;rsquo;s layered view of higher intelligence no doubt had many sources, built over time into a coherent philosophy. However it is conveniently explained in the language of general semantics. Any event has an infinite number of characteristics that can be abstracted from it; any sensory system (a mix of neurology, language, and training) abstracts a finite number, therefore experience is always less than the event that gave rise to it. Different sensory systems might perceive the same object entirely differently. A larger sensory system might approach a larger grasp of the object, a larger sense of its internal characteristics, as well as of its interrelationships with other objects and events. Herbert&amp;rsquo;s assumption, as shown in his treatment of the Calebans and of Avata, the electrokelp, is that a larger consciousness will come to see more and more of the essential interconnections of the universe, its multiple tracks of intertwined identity. On still deeper levels, asymptotically approaching (but never reaching) the infinity of the universe itself, consciousness approaches the appearance of unconsciousness (as in the Sleeper of The Dosadi Experiment), because perceiver and perceived approach identity. &lt;strong&gt;The logical conclusion of this process is that an infinite being, or Cod, is conterminous with the universe itself, and not with any of its parts. The savior god of human dreams must inevitably be a more limited creation; if not, like Jesus on the cross, he must inevitably refuse to act.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>prog math sci summary june 2016</title>
      <link>http://agam.github.io/post/prog-math-sci-summary-june-2016/</link>
      <pubDate>Mon, 27 Jun 2016 21:05:00 -0700</pubDate>
      
      <guid>http://agam.github.io/post/prog-math-sci-summary-june-2016/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Something for old-timers (yay!): &lt;a href=&#34;https://rcrowley.org/2010/01/06/things-unix-can-do-atomically.html&#34;&gt;&lt;em&gt;”Things UNIX can do atomically”&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.acolyer.org&#34;&gt;&lt;em&gt;”The Morning Paper”&lt;/em&gt;&lt;/a&gt; is an excellent blog I stumbled across, but which like many excellent things, I’m struggling to keep up with. It explores one interesting CS paper every day.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://homepages.cwi.nl/~steven/Talks/2016/05-13-pygrunn/&#34;&gt;&lt;em&gt;”Moore’s Switch and the future of programming”&lt;/em&gt;&lt;/a&gt; (also a talk at &lt;a href=&#34;http://www.pygrunn.org&#34;&gt;pygrunn&lt;/a&gt;) is (yet another?) an attempt to persuade us that traditional imperative programming has hit a wall.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is something you either &lt;em&gt;totally relate to&lt;/em&gt;, or just go &lt;em&gt;meh&lt;/em&gt; at, there’s no middle ground: &lt;a href=&#34;https://medium.com/@fun_cuddles/linux-of-the-90s-or-why-i-have-linux-desktop-ptsd-1f276a7887fb#.r3k5v1thf&#34;&gt;&lt;em&gt;”My Experience With Linux of the 90s, or why I have Linux Desktop PTSD”&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.vitavonni.de/blog/201503/2015031201-the-sad-state-of-sysadmin-in-the-age-of-containers.html&#34;&gt;&lt;em&gt;”The sad state of sysadmin in the age of containers”&lt;/em&gt;&lt;/a&gt; bemoans the layers of crapware piling up these days.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Essentially, the Docker approach boils down to downloading an unsigned binary, running it, and hoping it doesn&amp;rsquo;t contain any backdoor into your companies network.
&lt;em&gt;Feels like downloading Windows shareware in the 90s to me.&lt;/em&gt;
When will the first docker image appear which contains the Ask toolbar? The first internet worm spreading via flawed docker images?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hueniverse.com/2016/06/08/the-fucking-open-web/&#34;&gt;&lt;em&gt;”The Fucking Open Web”&lt;/em&gt;&lt;/a&gt; (sorry, that’s the actual title) bemoans (you see the pattern here, yes?) the inability of web apps to match native apps in slickness. Unlike most rant-writers though, this guy wrote a devil’s advocate style &lt;a href=&#34;https://hueniverse.com/2016/06/20/the-open-web-fuck-yeah/&#34;&gt;rebuttal&lt;/a&gt; too, so it’s not all bad&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://coding2learn.org/blog/2013/07/29/kids-cant-use-computers/&#34;&gt;&lt;em&gt;”Kids can’t use computers”&lt;/em&gt;&lt;/a&gt; bemoans (you see the pattern here, yes?) the fact that computers are these opaque magic boxes that everyone doesn’t even try to understand (but, c’mon, isn’t that a sign of success? how hard do most people try to understand their &lt;em&gt;car&lt;/em&gt;?)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To complete the trend, &lt;a href=&#34;http://beauty-of-imagination.blogspot.co.uk/2016/01/tcltk-vs-web-we-should-abandon-web.html&#34;&gt;&lt;em&gt;”Tcl/Tk vs the Web”&lt;/em&gt;&lt;/a&gt; isn’t content with rejuvenating the web. The claim here is that the web is fine, but we should ditch CSS in favor of some simple interpreted standardized widget set. Good luck with that.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, on an unrelated note — every now and then I discover something new I had no idea about. I was aware of the many really good language-specific IDEs that JetBrains puts out, but I had haver heard of the &lt;a href=&#34;http://www.onboard.jetbrains.com/articles/04/10/lop/&#34;&gt;“Meta Programming System”&lt;/a&gt;. Really cool stuff (though I wonder how it compares to &lt;a href=&#34;http://racket-lang.org&#34;&gt;Racket&lt;/a&gt; … &lt;em&gt;language-oriented programming&lt;/em&gt; seems to describe both of them).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(as part of a six-month experiment, I’m cross-posting this at &lt;a href=&#34;https://medium.com/@agam&#34;&gt;Medium&lt;/a&gt; as well as &lt;a href=&#34;http://agam.github.io&#34;&gt;the regular blog&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>luminus</title>
      <link>http://agam.github.io/post/luminus/</link>
      <pubDate>Fri, 27 May 2016 21:33:24 -0700</pubDate>
      
      <guid>http://agam.github.io/post/luminus/</guid>
      <description>&lt;p&gt;Trying out a bunch of Clojure web programming options for fun, came across Luminus, which is &lt;em&gt;excellent&lt;/em&gt; for getting started, is not full of magic like Rails, and has great debugging — see this screenshot!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh3.googleusercontent.com/eG2i2y469aUcejhJRReycIjudGvfidpQnIw3VbxhpC44FTvFbYVgUP5BylKhDd7ee3-0k4GzPs2w3IJ7bQ2C_zkGBOQYGYHqyY82TMJT69JpAe6CwVTF3nkaepSyEuiSTt7cPnFwGy-uLugO9W-9MnUXmO5JlhWT4AfPNJchCKhxD9hNjZlfJ3rZh8-Pwfvlszr3rgk_5bhxNd20RLvtxccGyVzGjzCktM2ATBinGpRSQgeB0a_gK0A-OMQQxVfc6O6mUvqPLiX1QnKLcTFzgCQ4Z7NXu_3vUGgTSeNrlbD8t5ayX6LCNiBW-LG3uBx_0-JoaEestIjoJmACr9rcaT2Ay466Htd-7-yHt5uUBVqjfaTIbjnVTRSNeXDkq1i5rHtzPHP0Zc8-Q69ldXHn8GaU_9wY16cbT7DfhbrtjKKRb3RmdWKXLGCTwi-I0whERx6LSz-DO1Qw_kANFvj2m49OIT65VIICxhvf5LWFKFLh13rANa4A2fu5g1DF67MTdqNOBz761P6BlB7HBahhg_jFpSVWWvzXsC38Gm9fn5GlAc5vSCiFfo3DP7Mu6s2iQkIcc38e52P4KNWbzqiAuHJ8_f8dueRj=w1454-h822-no&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Luminus Error Trace&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>prog math sci summary may 2016</title>
      <link>http://agam.github.io/post/monthly-prog-math-sci-summary-may-2016/</link>
      <pubDate>Fri, 27 May 2016 21:29:00 -0700</pubDate>
      
      <guid>http://agam.github.io/post/monthly-prog-math-sci-summary-may-2016/</guid>
      <description>&lt;p&gt;May’s list of interesting prog/math/sci stuff:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To start off with, a post on &lt;a href=&#34;https://medium.freecodecamp.com/being-a-developer-after-40-3c5dd112210c#.fulqyztcs&#34;&gt;being a programmer in your 40s&lt;/a&gt;, full of good tips (&lt;em&gt;“forget the hype”, “learn about software history”, “teach”, “don’t take a job just for the money”, and other good stuff&lt;/em&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the era of &lt;a href=&#34;http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/&#34;&gt;“leftpad”&lt;/a&gt;, someone asks, half-joking, half-despairing, whether &lt;a href=&#34;http://blog.dantup.com/2016/04/have-software-developers-given-up/&#34;&gt;software developers have given up&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Bots are Hot!&lt;/em&gt; Yawn, right? Everyone knows this, right? Except &lt;a href=&#34;http://www.wired.com/1996/04/netbots/&#34;&gt;this article&lt;/a&gt; is from twenty years ago, from the April 1996 issue of Wired magazine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If we need software to be modular, to reuse and “plug in” parts from libraries and so on, some concept of &lt;em&gt;Objects&lt;/em&gt; are &lt;a href=&#34;http://www.cs.cmu.edu/~aldrich/papers/objects-essay.pdf&#34;&gt;inevitable&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clojure and Python &lt;a href=&#34;http://jkkramer.com/sudoku.html&#34;&gt;aren’t so different&lt;/a&gt; after all (shown via a side-by-side Sudoku solving programs)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An old Minsky paper from 1970, on &lt;a href=&#34;http://web.mit.edu/dxh/www/1970_Marvin_Lecture_Transcript_Italy_Limitations_Language.pdf&#34;&gt;The limitations of using languages for description&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This &lt;a href=&#34;http://jr0cket.co.uk/2015/08/spacemacs-first-impressions-from-an-emacs-driven-developer.html&#34;&gt;article&lt;/a&gt; inspired me to try Spacemacs, and it really was quite good. I just happen to have a large &lt;code&gt;.emacs&lt;/code&gt;, so after a few days change aversion kicked in and I moved back to “plain old Emacs”, but it’s definitely very well done, recommended for newbies, and something to keep an eye on.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you have time to watch one YouTube video, let it be THIS. The one and only Matthias Felleisen gives a keynote lecture at Clojure West 2016: &lt;a href=&#34;https://www.youtube.com/watch?v=XTl7Jn_kmio&#34;&gt;“Types are like the weather, Type Systems are like weathermen”&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;My “to read” list keeps growing, but it doesn’t stop me from adding to it. This month’s entry: &lt;a href=&#34;http://cleveralgorithms.com/nature-inspired/index.html&#34;&gt;“Clever Algorithms: Nature-inspired Programming Recipes”&lt;/a&gt; (uses Ruby, but I’m sure it’s easily translatable to your favorite language)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, a contrarian open-source opinion, by Bill Joy in &lt;a href=&#34;https://www.salon.com/2000/05/16/chapter_2_part_one/&#34;&gt;an interview&lt;/a&gt; from a bit over a decade ago:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;Most people are bad programmers&lt;/em&gt;,” says Joy. “The honest truth is that having a lot of people staring at the code does not find the really nasty bugs. The really nasty bugs are found by a couple of really smart people who just kill themselves. Most people looking at the code won’t see anything … You can’t have thousands of people contributing and achieve a high standard.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Make of that what you will)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>getting started with hugo</title>
      <link>http://agam.github.io/post/getting-started-with-hugo/</link>
      <pubDate>Thu, 05 May 2016 21:04:17 -0700</pubDate>
      
      <guid>http://agam.github.io/post/getting-started-with-hugo/</guid>
      <description>

&lt;p&gt;Some notes on renewing the blog &amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;initial-set-up-and-migration&#34;&gt;Initial set up and migration&lt;/h2&gt;

&lt;p&gt;Creating a new site couldn’t be simpler (and yes, this isn’t blog-specific, you could really make &lt;em&gt;any&lt;/em&gt; kind of static website)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo new site progblog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I came across this simple-to-use tool someone else created, called &lt;a href=&#34;thanks to [Alistair Young]&#34;&gt;Octohug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: I realized that the titles of the posts have been lost and replaced by the wordy urls, so “…” became “dot dot dot” and “/“ became “slash”. I might change this later, or I might be lazy and skip it. It’s not &lt;em&gt;all that bad&lt;/em&gt; to look at anyway. Ditto for adding back tags/categories. Too bad.&lt;/p&gt;

&lt;h2 id=&#34;building-and-previewing-the-site&#34;&gt;Building and previewing the site&lt;/h2&gt;

&lt;p&gt;The counterpart to &lt;code&gt;rake generate&lt;/code&gt; for Octopress, except much, much, &lt;em&gt;much&lt;/em&gt; faster.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo --theme &amp;quot;angels-ladder&amp;quot; --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The counterpart to &lt;code&gt;rake preview&lt;/code&gt; is something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo server -t angels-ladder -D -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s worth pointing out that there is no longer any “generating files …” output on the console, because any changes are reflected &lt;em&gt;within a second&lt;/em&gt; or so. Really, you can’t tell the difference (which, of course, is how it should be!)&lt;/p&gt;

&lt;h2 id=&#34;gist-tags&#34;&gt;Gist tags&lt;/h2&gt;

&lt;p&gt;A small digression: I had a lot of &lt;em&gt;gist tags&lt;/em&gt; of the form &lt;code&gt;{% gist 12f2347dfh9 %}&lt;/code&gt;, and I used these so often I began to think of them as part of standard markdown, but of course they’re &lt;em&gt;not&lt;/em&gt; part of standard markdown, so we need a workaround, and luckily Hugo has a similar feature called &lt;em&gt;shortcodes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, I added a shortcode layout for the &lt;code&gt;gist&lt;/code&gt; keyword as described &lt;a href=&#34;https://vielmetti.github.io/post/2015/2015-07-14-publishing-from-hugo-to-github-pages/&#34;&gt;here&lt;/a&gt;, and then ran &lt;code&gt;sed&lt;/code&gt; over the post content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sed -i -- &#39;s/{% gist \([0-9a-z]*\) %}/&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/1.js&#34;&gt;&lt;/script&gt;
/&#39; content/post/*
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;archiving-the-old-blog&#34;&gt;Archiving the old blog&lt;/h2&gt;

&lt;p&gt;For nostalgic purposes (?) alone, I created a new repo, and saved a snapshot of the current &lt;code&gt;agam.github.io&lt;/code&gt; repo there:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git push https://github.com/agam/Old-Jekyll-Blog.git
$ git push https://github.com/agam/Old-Jekyll-Blog.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;publishing-to-github-pages&#34;&gt;Publishing to Github Pages&lt;/h2&gt;

&lt;p&gt;First of all, creating a new post is as simple as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo new post/getting-started-with-hugo.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I briefly considered jumping to a different static hosting site, but it didn’t seem worth the trouble. So I adapted the approach described &lt;a href=&#34;thanks to Edward Vielmetti&#34;&gt;here&lt;/a&gt;, which just means cleaning up the existing repo, deleting the &lt;code&gt;source&lt;/code&gt; branch, and directing Hugo’s output to the &lt;code&gt;master&lt;/code&gt; branch,  then pushing the same up to Github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo -d ../Github/agam.github.io/ --theme=angels-ladder
$ cd ../Github/abam.github.io
$ git commit -a -m ‘sync to latest post’
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! I do have some TODOs left, like installing &lt;code&gt;Pygments&lt;/code&gt; so that source code formatting doesn’t suck , but other than that, I’m good to go.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; No point leaving that hanging, so I added it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://yandex.st/highlightjs/8.0/styles/default.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://yandex.st/highlightjs/8.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(I went with client-side highlighting since I didn’t want to slow down my fast new Go site generator with a sluggish Python plugin. So if the syntax coloring is off, you know whom to blame.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>moving away from jekyll</title>
      <link>http://agam.github.io/post/moving-away-from-jekyll/</link>
      <pubDate>Thu, 05 May 2016 16:59:52 -0700</pubDate>
      
      <guid>http://agam.github.io/post/moving-away-from-jekyll/</guid>
      <description>&lt;p&gt;I’ve mentioned earlier how infuriatingly slow the whole &lt;code&gt;rake generate&lt;/code&gt;, &lt;code&gt;rake preview&lt;/code&gt; steps are, and I went into a bit of analysis paralysis thinking about what I want to change here — but I’ve decided to stick to a static blog, just going with a faster one.&lt;/p&gt;

&lt;p&gt;Enter &lt;strong&gt;Hugo&lt;/strong&gt;.(fn)&lt;/p&gt;

&lt;p&gt;I played around with it a little bit, and so far it seems lightning fast. In interactive software, every second counts. Shave the seconds into milliseconds, and it becomes a whole new experience.&lt;/p&gt;

&lt;p&gt;Interestingly, I started with &lt;strong&gt;Hakyll&lt;/strong&gt; before moving to the current &lt;strong&gt;Octopress&lt;/strong&gt; based-version of this blog, so (hopefully) this post will soon just be a reminder of v3.0 of this blog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>monthly prog slash math slash sci summary april 2016</title>
      <link>http://agam.github.io/post/2016/04/26/monthly-prog-slash-math-slash-sci-summary-april-2016/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://agam.github.io/post/2016/04/26/monthly-prog-slash-math-slash-sci-summary-april-2016/</guid>
      <description>&lt;p&gt;Ok, so here’s this month’s curated list of interesting Math/Sci/Programming &lt;em&gt;stuff&lt;/em&gt;. &lt;strong&gt;Note&lt;/strong&gt;: this isn’t stuff that &lt;em&gt;happened&lt;/em&gt; this month, it’s stuff that &lt;em&gt;I came across&lt;/em&gt; this month.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To start off with something &lt;em&gt;fun&lt;/em&gt;, Gilad Bracha (I try not to miss anything by him) &lt;a href=&#34;https://devchat.tv/ruby-rogues/250-rr-programming-language-evolution-and-design-with-gilad-bracha&#34;&gt;joins the discussion&lt;/a&gt; at &lt;em&gt;Ruby Rogues&lt;/em&gt;, they all talk about Dart and Smalltalk and Newspeak, and much hilarity ensues. So, if you’re into that sort of thing.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;GILAD:  And the thing is once you get used to the machine doing it for you it&amp;rsquo;s really hard to go back to the Stone Age. Smalltalk or Smalltalk-like systems, they give you in certain ways the life of luxury. It&amp;rsquo;s so nice that you can, when something goes wrong you can always find out exactly what the state of the objects were and say, “Oh, this is wrong.” And I don&amp;rsquo;t have to restart things to get back there if I figured out what&amp;rsquo;s wrong or I have a hunch what&amp;rsquo;s wrong. I can just change it and tweak it and go forward a lot of times, which is something that again you have to experience because people tend to not believe that. But you usually can not only make the change but you can very often keep going even though the program was wrong. You can adjust its state now a bit and say, “Okay, let&amp;rsquo;s assume that this is now consistent. I can keep moving and see what happens.” &lt;strong&gt;And you get so comfortable with that and it&amp;rsquo;s so much more pleasant that after that yeah, you ramble on about it like I do.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, watch it, it&amp;rsquo;s all good stuff.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Something to jog your preconceived notions about what “object oriented” means: a paper from twenty years ago, titled &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.56.4713&#34;&gt;&lt;em&gt;”Classes vs. Prototypes - Some Philosophical and Historical Observations”&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The distinction between class-based and prototype-based systems reflects a long-lasting philosophical dispute concerning the representation of abstractions. &lt;strong&gt;Plato viewed forms — stable, abstract, “ideal” descriptions of things — as having an existence more real than instances of those things in the real world&lt;/strong&gt;. Class-based languages such as Smalltalk, C++ or Simula are Platonic in their explicit use of classes to represent similarity among collections of objects. Prototype-based systems such as Self [UnS87], Omega [Bla91, Bla94], Kevo [Tai92, Tai93], GlyphicScript [Gly94] and NewtonScript [SLS94] represent &lt;strong&gt;another view of the world, in which one does not rely so much on advance categorization and classification, but rather tries to make the concepts in the problem domain as tangible and intuitive as possible&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;And if you liked that, you’ll like &lt;a href=&#34;https://www.youtube.com/watch?v=8nfrC-YLYqc&#34;&gt;this discussion&lt;/a&gt; with David Ungar, the man behind the &lt;em&gt;Self&lt;/em&gt; programming language. In case you never heard of it before (as I hadn’t, until recently), that’s where Javascript gets its concept of &lt;em&gt;”prototype”&lt;/em&gt; from. And if you’re &lt;em&gt;still&lt;/em&gt; hungry for more, see &lt;a href=&#34;http://www.infoq.com/presentations/oop-language-context&#34;&gt;this presentation&lt;/a&gt; titled &lt;em&gt;”Dancing with Symmetry to Harness the Power of Complexity: Subjective Programming in Context”&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A set of ten &lt;a href=&#34;http://www.allthingsdistributed.com/2016/03/10-lessons-from-10-years-of-aws.html&#34;&gt;“learnings”&lt;/a&gt; from ten years of AWS. If I had to pick, I’d say the hardest directive would be to &lt;em&gt;”build evolvable systems”&lt;/em&gt;, because that almost never happens.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Someone finally wrote what I&amp;rsquo;ve been thinking for a while &amp;hellip; the answer for &amp;ldquo;how to do X&amp;rdquo; can&amp;rsquo;t always be &amp;ldquo;oh, just use plugin Y” (or, &lt;a href=&#34;http://amasad.me/2016/01/03/overcoming-intuition-in-programming/&#34;&gt;&lt;em&gt;”How to overcome intuition in programming”&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Marvin Minsky passed away early this year; &lt;a href=&#34;http://web.media.mit.edu/~minsky/papers/TuringLecture/TuringLecture.html&#34;&gt;here&lt;/a&gt; is his 1970 Turing Award lecture, which opens with this interesting sentence:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The trouble with computer science today is an obsessive concern with form instead of content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s as true today as it was then, right? :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is something I’ve come across many times before, so skip it if you’ve seen it, or skip it anyway; it’s basically a bunch of Haskell insider jokes, laid out as &lt;a href=&#34;http://www.willamette.edu/~fruehr/haskell/evolution.html&#34;&gt;&lt;em&gt;”The Evolution of a Haskell Programmer”&lt;/em&gt;&lt;/a&gt;, starting from a freshman, going all the way to a post-doc, and ending, on an anti-climactic note, with the tenured professor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This one fulfills this month’s “rant quota”: Brian Will, slightly infamous for ranting against Object-Oriented Programming, talks about &lt;a href=&#34;https://www.youtube.com/watch?v=L9v4Mg8wi4U&amp;amp;list=WL&amp;amp;index=6&#34;&gt;&lt;em&gt;”Replacing the Unix tradition”&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Another post in the &lt;em&gt;counter-intuitive&lt;/em&gt; category: &lt;a href=&#34;http://ib-krajewski.blogspot.com/2015/11/ocaml-and-multithreading.html&#34;&gt;the best defense&lt;/a&gt; I’ve yet seen for &lt;em&gt;not&lt;/em&gt; using shared-memory multithreading, using OCaml as an example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;… parallel processing plus message passing is a much safer model that multithreading …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Finally, to end on a similar note to which we began, the amazing Eugenia Cheng (look her books up) talks about &lt;a href=&#34;https://www.youtube.com/watch?v=h2p68JjSUH0&#34;&gt;&lt;em&gt;”How to Bake &amp;lsquo;How to Bake Pi&amp;rsquo;: Reflections on Making Abstract Math Palatable”&lt;/em&gt;&lt;/a&gt;; it’s targeted at people of all ages, and tries to make math fun again!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>stumbling around programming</title>
      <link>http://agam.github.io/post/2016/04/21/stumbling-around-programming/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://agam.github.io/post/2016/04/21/stumbling-around-programming/</guid>
      <description>&lt;p&gt;(In which I keep talking to myself about learning/doing stuff in the near past/future)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Read Scott Meyers’ updated C++&lt;sup&gt;11&lt;/sup&gt;&amp;frasl;&lt;sub&gt;14&lt;/sub&gt; book: he’s really the only one who can do a good job of explaining stuff like the subtleties of universal references. Sad to see him take a break (though I hope he’s back in time to explain C++17 to us!)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Realized I made a big arrogant jerky mistake by dismissing a lot of stuff as being lame and/or hipsterish and not taking it seriously. So I’m going to spend time learning Ruby/Rails and some Javascript/Coffeescript and make some toy apps with that&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I’ve totally fallen off the Math bandwagon, and I realized this actually happened &lt;em&gt;some time ago&lt;/em&gt;, which is very depressing. And I don’t know &lt;em&gt;exactly&lt;/em&gt; what to do about it, so I’d like to find &lt;em&gt;some&lt;/em&gt; way back ..&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Had fun reading through a bunch of Clojure code/tutorials/books, but I don’t really have any ideas on what to &lt;em&gt;do&lt;/em&gt; with it, as silly as that sounds&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keep opening and closing Pharo. Way too much fun, but I have lesser and lesser time for that kind of goalless fun these days. Made a mental note to keep suggesting Squeak as a strong contender for an introductory programming environment for kids.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Speculatively, if I get time, I have to get back to reading TAPL&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>monthly prog slash math slash sci summary march 2016</title>
      <link>http://agam.github.io/post/2016/04/04/monthly-prog-slash-math-slash-sci-summary-march-2016/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://agam.github.io/post/2016/04/04/monthly-prog-slash-math-slash-sci-summary-march-2016/</guid>
      <description>&lt;p&gt;(&lt;em&gt;Meta&lt;/em&gt;: This month&amp;rsquo;s post is late because I was on vacation)&lt;/p&gt;

&lt;p&gt;March&amp;rsquo;s list of curated &lt;em&gt;stuff&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href=&#34;http://ethw.org/Main_Page&#34;&gt;grab bag&lt;/a&gt; of engineering and technology history: lots of interesting stuff here, such as &lt;a href=&#34;http://ethw.org/Creating_Magnetic_Disk_Storage_at_IBM&#34;&gt;this overview&lt;/a&gt; of early disk storage&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RdE-d_EhzmA&#34;&gt;A talk&lt;/a&gt; by David West on how &amp;ldquo;Object Oriented Programming&amp;rdquo; has been misunderstood (I ended up buying his book &lt;a href=&#34;http://www.amazon.com/Object-Thinking-Developer-Reference-David/dp/0735619654&#34;&gt;&lt;em&gt;&amp;ldquo;Object Thinking&amp;rdquo;&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stumbled across this PhD thesis from 1991 by John Sturdy titled &lt;a href=&#34;http://www.cb1.com/~john/thesis/thesis.html&#34;&gt;&lt;em&gt;&amp;ldquo;A Lisp through the Looking Glass&amp;rdquo;&lt;/em&gt;&lt;/a&gt;; it seemed vaguely similar to the &lt;em&gt;Black&lt;/em&gt; system in Scheme that Nadia demoed a while ago at Strangeloop. Anyway, while I don&amp;rsquo;t quite understand it, there is much coolness here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This thesis presents a new architecture for programming language interpreters, &lt;strong&gt;in which interpreters are not only first-class values, but are also arranged in a tower of meta-circular interpretation&lt;/strong&gt; which is accessible reflectively&amp;mdash;so that a program may modify elements of the meta-circular tower under which it runs, and thus cause changes in the manner of its own interpretation.&lt;/p&gt;

&lt;p&gt;To facilitate such modification, we develop a representation for interpreters that splits each interpreter into a language (a collection of independently implemented constructs) and an evaluator (connecting the constructs together).&lt;/p&gt;

&lt;p&gt;To implement such a mutable infinite meta-circular interpreter, we need another interpreter outside the tower, the meta-evaluator. We present this, along with a systematic way of linking it to the meta-circular tower. We show that a further form of meta-circularity may be introduced by bringing the meta-evaluator into the reflectively accessible part of the system; and that this may be repeated without limit, using the same techniques.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gregory Chaitin wrote an essay on &lt;a href=&#34;http://inference-review.com/article/doing-mathematics-differently&#34;&gt;&lt;em&gt;&amp;ldquo;Doing Mathematics Differently&amp;rdquo;&lt;/em&gt;&lt;/a&gt;, in which he seems to encourage an experimental branch of mathematics, similar to physics.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Another essay, this time by Simon Schaffer titled &lt;a href=&#34;http://www.imaginaryfutures.net/2007/04/16/babbages-intelligence-by-simon-schaffer/&#34;&gt;&lt;em&gt;&amp;ldquo;Babbage&amp;rsquo;s Intelligence&amp;rdquo;&lt;/em&gt;&lt;/a&gt;, which is ridiculously long and meanders endlessly, and is worth reading only for the fascinating nuggets buried here and there.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In his address to the Society in early 1824, the Society’s president, the financier, mathematician and orientalist Henry Colebrooke, summed up the significance of Babbage’s planned device. He referred to contemporary developments of industrial machinery only to contrast them with the Difference Engine. “In other cases, mechanical devices have substituted machines for simpler tools or for bodily labour….But the invention to which I am adverting comes in place of mental exertion: it substitutes mechanical performance for an intellectual process”. In other words, &lt;strong&gt;“Mr Babbage’s invention puts an engine in place of the computer”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As Babbage and his allies among the political economists showed, the disaggregation of the production process into its simplest components allowed a series of economies and practices of surveillance. Mechanized production required strict discipline. The same was true of the Analytical Engine. Parcelling the processes of Lagrangean algebra into specific components allowed the increase in speed of the machine, the transformation of infinities of space into manageable durations of time, the most economical recompense to each component in terms of consumed power (if mechanical) or consumed wages (if human). “&lt;strong&gt;The whole history of the invention has been a struggle against time&lt;/strong&gt;”, Babbage wrote in 1837. The replacement of individual human intelligence by machine intelligence was as apparent in the workshop as in the engines. In the former, this task was both politically and economically necessary. “One great advantage which we derive from machinery is the check which it affords against the inattention, idleness or the dishonesty of human agents”. This set of failings could produce erroneous astronomical tables, hence the significance of Prony’s reports on the performance of the least intelligent computers when subject to the right management. Unreliable agents could also form trade union combinations, which, Babbage held, were always “injurious” to the workforce itself. His aim here was to contest the influence of “designing persons” and show the working classes that &lt;strong&gt;“the prosperity and success of the master manufacturer is essential to the welfare of the workman”&lt;/strong&gt;, even though “I am compelled to admit that this connexion is in many cases too remote to be understood by the latter”.&lt;/p&gt;

&lt;p&gt;This problem of the geography of intelligence depended on the fetishisation of the machines and the reification of the labour power exerted around them. As Raphael Samuel has demonstrated, mid-Victorian industrial mechanization was accompanied by the preservation, intensification and expansion of skilled manual labour throughout the economy. “The mid-Victorian engineer was still characteristically a craftsman, an artisan or mechanic rather than an operative or hand”. [67] The representation of this dual process of the intensification of skill and the subordination of mechanization involved a remarkable balancing act amongst the commentators on the factory system. In the report of his Lancashire tour during the Chartist general strike of 1842, in which almost every cotton works was closed, Cooke Taylor premised that “the diffusion of the Factory System has created a larger demand than previously existed for intelligence and contrivance” among the workforce, and deduced that &lt;strong&gt;the machines themselves could not, or should not, be granted tyrannic power&lt;/strong&gt;. “The operatives are stringently ruled by their own consent…So strange a combination of perfect despotism with perfect freedom never before existed, and to have produced such a state is one of the noblest triumphs of morality and intelligence”. [68] &lt;strong&gt;The problem remained. Whose intelligence had produced this splendid state of voluntary servitude and supreme skill? Protagonists of the cotton masters had no doubt – it flowed from the machines themselves&lt;/strong&gt;. Thus Edward Baines, a veteran lecturer against the Chartists on the benefits of rapid automation, argued in his history of the cotton industry that “all the precision, power and incessant motion belong to the machines alone, and the work-people have merely to supply them with work”. The embodiment of skill within the automatic system was used to distract attention from the labour power exerted by the workforce itself. The most hostile critics of the machine economy, such as the Liberal Manchester medic Peter Gaskell, countered that it followed that any worker would be &lt;strong&gt;“reduced to a mere watcher or feeder of his mighty assistant”, and that “the struggle carrying on between human power on the one hand, and steam aided by machinery, is gradually approaching a crisis”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The apotheosis of the intelligent machine was an integral part of Babbage’s ambitious programme. This programme has been used here to illuminate the complex character of systematic vision in the Industrial Revolution. In the Ninth Bridgewater Treatise, &lt;strong&gt;the system was coextensive with the universe, and Babbage explained that its order and logic would only be visible from a privileged point of view&lt;/strong&gt;. In his surveys of the factories and workshops, Babbage set out to reveal the systematic character of the machine economy by pointing out the rationale of the production, distribution and deployment of power in the workshops of industrial Britain. In his project to build intelligent calculating engines, he attempted to represent himself as the intellectual manager of the complex labour relations of the machine-tool industry, initially disastrously, and then as part of his overall vision of a newly rational system of automatic precision engineering. In the setting of early Victorian society, &lt;strong&gt;the connections between these spheres of theological, political and technological work cannot be seen as merely metaphorical. These techniques helped make a new social order and a new form of knowledge.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A fascinating &lt;a href=&#34;http://www.gmunk.com/OBLIVION-GFX&#34;&gt;account&lt;/a&gt; of the special effects work on the movie &lt;em&gt;&amp;ldquo;Oblivion&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dave Baggett at Gamasutra describes &lt;a href=&#34;http://www.gamasutra.com/blogs/DaveBaggett/20131031/203788/My_Hardest_Bug_Ever.php&#34;&gt;&lt;em&gt;&amp;ldquo;my hardest bug ever&amp;rdquo;&lt;/em&gt;&lt;/a&gt;, where setting the timer to a high enough clock rate interfered with the baud rate (??). I would hate to have a problem like that.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Luke Gorrie shows how a modern CPU is complicated enough &lt;a href=&#34;https://github.com/lukego/blog/issues/15&#34;&gt;to be thought of&lt;/a&gt; as a distributed programming system.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if you too get irritated by the mention of the word &lt;em&gt;&amp;ldquo;agile&amp;rdquo;&lt;/em&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=hG4LH6P8Syk&#34;&gt;Robert Martin explains&lt;/a&gt; how it started and how it became so bad.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>some badly written code</title>
      <link>http://agam.github.io/post/2016/03/11/some-badly-written-code/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://agam.github.io/post/2016/03/11/some-badly-written-code/</guid>
      <description>&lt;p&gt;Heh, didn&amp;rsquo;t know what else to title this sort of scrapbook/notebook entry. Basically I hadn’t looked at Codewars for a long time, so I went back and tried the next “Kata”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Problem:&lt;/em&gt; Given two integers m, n (1 &amp;lt;= m &amp;lt;= n) we want to find all integers between m and n whose sum of squared divisors is itself a square.&lt;/p&gt;

&lt;p&gt;(E.g. 42 has divisors: 1,2,3,6,7,14,21,42, the squares of which are 1,4,9,3649,196,441,1764, and sum to 2500, which is a square)&lt;/p&gt;

&lt;p&gt;I wrote my trivial solution, tried it and the submission failed because it timed out. So I hacked away, and uglified my solution, until it was using “memoized” divisors.&lt;/p&gt;

&lt;p&gt;I ran it locally and it seemed faster, then I submitted it, and … it timed out again. I gave up, and moved on. I guess the lesson to be learnt is that it&amp;rsquo;s always easy to code yourself into a corner?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Solution:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module Codewars.G964.Sumdivsq where

import Data.List
import Data.Map as M

intSqrt :: Int -&amp;gt; Int
intSqrt = floor . sqrt . fromIntegral

isSquare :: Int -&amp;gt; Bool
isSquare x = x == (intSqrt x)^2

sumSq :: [Int] -&amp;gt; Int
sumSq list = sum [x^2 | x &amp;lt;- list]

multiply :: Int -&amp;gt; [Int] -&amp;gt; [Int]
multiply factor oldDivlist = factor : oldDivlist ++ (Data.List.map (* factor) oldDivlist)

divisorHelper :: Int -&amp;gt; Int -&amp;gt; Int -&amp;gt; (Map Int [Int]) -&amp;gt; [Int] -&amp;gt; (Map Int [Int], [Int])
divisorHelper n lower upper knownDivs listDivs =
  if lower &amp;gt; upper
  then (M.insert n listDivs knownDivs, listDivs)
  else
    let otherDiv = n `div` lower
    in
      if (n `rem` lower /= 0)
      then
        -- Keep going till we can divide
        divisorHelper n (lower+1) upper knownDivs listDivs
      else
        if otherDiv == lower
        then
          -- Special case: we reach a square divisor
          (M.insert n (lower : listDivs) knownDivs, lower : listDivs)
          -- Ok, we need to know if we&#39;ve seen the bigger number before
        else case M.lookup otherDiv knownDivs of
          Just oldDivlist -&amp;gt;
            -- We&#39;re done!
            let newDivlist = nub $ (lower : listDivs) ++ (multiply lower oldDivlist)
            in
              (M.insert n newDivlist knownDivs, newDivlist)
          Nothing -&amp;gt; divisorHelper n (lower+1) (otherDiv-1) knownDivs (lower : otherDiv : listDivs)


divisors :: Int -&amp;gt; (Map Int [Int]) -&amp;gt; (Map Int [Int], [Int])
divisors n knownDivs = divisorHelper n 1 n knownDivs []

listSquaredHelper :: Int -&amp;gt; Int -&amp;gt; Map Int [Int] -&amp;gt; [(Int, Int)] -&amp;gt; [(Int, Int)]
listSquaredHelper lower upper knownDivs sqList =
  if lower &amp;gt; upper
  then
    sqList
  else
    let (newKnownDivs, divs) = divisors lower knownDivs
        s = sumSq divs
    in
      if isSquare s
      then
        listSquaredHelper (lower+1) upper newKnownDivs  ((lower,s):sqList)
      else
        listSquaredHelper (lower+1) upper newKnownDivs sqList

listSquared :: Int -&amp;gt; Int -&amp;gt; [(Int, Int)]
listSquared m n = reverse $ listSquaredHelper m n M.empty []

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I clearly have a long way to go in understanding the “why” of Haskell performance. My initial solution was much, uh &amp;hellip; simpler. I didn&amp;rsquo;t save it but I translated that into Clojure, which looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns sumdivsq.core)

(defn is-square
  [n]
  (== n (Math/pow (int (Math/sqrt n)) 2)))

(defn sum-sq
  [lst]
  (int (reduce + (map #(Math/pow % 2) lst))))

(defn divisors
  [n]
  (if (== n 1)
    [1]
    (conj (filter #(== 0 (mod n %)) (range 1 (inc (/ n 2)))) n)))

(defn list-squared
  [m n]
  (letfn [(lfh [n]
            (let [ssq (sum-sq (divisors n))]
              (when (is-square ssq)
                [n, ssq])))]
    (keep #(lfh %) (range m n))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Certainly &lt;em&gt;looks&lt;/em&gt; very nice, and it passed all the tests, but I was too impatient to begin optimizing it, and left this one behind too &amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>object thinking</title>
      <link>http://agam.github.io/post/2016/03/02/object-thinking/</link>
      <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://agam.github.io/post/2016/03/02/object-thinking/</guid>
      <description>&lt;p&gt;I picked up &lt;a href=&#34;http://www.amazon.com/Object-Thinking-Developer-Reference-David/dp/0735619654&#34;&gt;&lt;em&gt;&amp;ldquo;Object Thinking&amp;rdquo;&lt;/em&gt;&lt;/a&gt; by David West recently, which is an unusual computer programming text, in that it devotes much (most?) of its pages to &amp;ldquo;philosophy&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Somewhere towards the beginning, there&amp;rsquo;s this example of writing a program to count the frequencies of words, first in Pascal, then in Smalltalk written like Pascal, and finally in Smalltalk written in the &amp;ldquo;proper&amp;rdquo; OO style.&lt;/p&gt;

&lt;p&gt;I thought I&amp;rsquo;d attempt the same but with Go and Dart instead &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note (1)&lt;/strong&gt;: this is &lt;em&gt;not&lt;/em&gt; about one language being better than another or something of the sort; the point is rather that the style is independent of the language, is meant only to contrast (in the author&amp;rsquo;s opinion) purely procedural vs purely object-oriented styles of programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note (2)&lt;/strong&gt;: some of the code below may be idiomatic, don&amp;rsquo;t get upset, this is just for fun, I&amp;rsquo;m trying to match the original Pascal and Smalltalk as closely as possible.&lt;/p&gt;

&lt;p&gt;First of all, the classic procedural program.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;
import &amp;quot;bufio&amp;quot;
import &amp;quot;os&amp;quot;

func main() {
	fmt.Printf(&amp;quot;Enter line: &amp;quot;)
	bio := bufio.NewReader(os.Stdin)
	line, _, err := bio.ReadLine()
	if err != nil {
		return
	}
	var f [26]int
	for i := 0; i &amp;lt; 26; i++ {
		f[i] = 0
	}

	for i := 0; i &amp;lt; len(line); i++ {
		c := line[i]
		k := c - &#39;a&#39;
		if k &amp;gt;= 0 &amp;amp;&amp;amp; k &amp;lt; 26 {
			f[k] = f[k] + 1
		}
	}

	fmt.Println(&amp;quot;Frequencies :-&amp;quot;)
	for i := 0; i &amp;lt; 26; i++ {
		fmt.Printf(&amp;quot;%d &amp;quot;, f[i])
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, a language that supports object-orientation, but used in a procedural style.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:io&#39;;

main() {
  var f = new List(26);
  stdout.write(&amp;quot;Enter line: &amp;quot;);
  var line = stdin.readLineSync();
        
  for (int i = 0; i &amp;lt; 26; i++) {
    f[i] = 0;
  }

  var lowerCaseA = &amp;quot;a&amp;quot;.codeUnitAt(0);
  for (int i = 0; i &amp;lt; line.length; i++) {
    var c = line.codeUnitAt(i);
    var k = c - lowerCaseA;
    if (k &amp;gt;= 0 &amp;amp;&amp;amp; k &amp;lt; 26) {
      f[k] = f[k] + 1;
    }
  }

  print(&amp;quot;Frequencies :-&amp;quot;);
  stdout.write(f);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Third, an object-oriented program (or, you could call it a functional program too, and then make a meta-point that I won&amp;rsquo;t).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:io&#39;;

main() {
  var f = new Map();
  stdout.write(&amp;quot;Enter line: &amp;quot;);
  var line = stdin.readLineSync();
  line.runes.toList().forEach((e) {
        f.putIfAbsent(e, () =&amp;gt; 0);
        f[e]++;
      });

  print(&amp;quot;Frequencies :-&amp;quot;);
  print(f);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, the original analogy might not be preserved very well, because (1) Dart is &lt;em&gt;way&lt;/em&gt; more verbose than Smalltalk, and (2) I showed whole programs here, rather than relevant fragments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>monthly prog slash math slash sci summary february 2016</title>
      <link>http://agam.github.io/post/2016/02/26/monthly-prog-slash-math-slash-sci-summary-february-2016/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://agam.github.io/post/2016/02/26/monthly-prog-slash-math-slash-sci-summary-february-2016/</guid>
      <description>&lt;p&gt;I said I’d pick a better name, but I couldn’t, so I picked a &lt;em&gt;different&lt;/em&gt; name instead. Anyway, here is February’s badly curated list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may have come across &lt;a href=&#34;http://www.templeos.org&#34;&gt;TempleOS&lt;/a&gt;, one of those crazy things made by crazy people, and it looks like &lt;a href=&#34;http://web.archive.org/web/20060702135534/http://www.losethos.com/&#34;&gt;&lt;em&gt;“LoseThos”&lt;/em&gt;&lt;/a&gt; was a predecessor (&lt;strong&gt;note&lt;/strong&gt;: that it is available at all is due to the ever-amazing “Wayback Machine”)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You used to buy a computer to program. They didn&amp;rsquo;t do much else&lt;/strong&gt;. LoseThos is intended for hobbiest programmers. A working knowledge of C programming is required. It more or less runs on least common denominator PC hardware without networking or the Internet. It is retro in some respects, having no security. As a programmer, I like having full access to my machine &amp;ndash; being able to turn-off interrupts or do direct disk block access. It is highly textual, so things can be scripted.  It boots fast, and you can power-off whenever you feel like, but just don&amp;rsquo;t do it during disk writes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Someone pointed me to the &lt;a href=&#34;https://lab.open.wolframcloud.com/app/&#34;&gt;“Wolfram Programming Lab”&lt;/a&gt; … I’ve only looked at it superficially, but it might be a good alternative to &lt;em&gt;Scratch&lt;/em&gt;, as an initial introduction to programming that “makes things happen”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is a theme that I like to share and re-share: Anil Dash talks about &lt;a href=&#34;https://www.youtube.com/watch?v=9KKMnoTTHJk&#34;&gt;“The Web We Lost”&lt;/a&gt; (tl;dr: &lt;strong&gt;the internet we have is not the internet we were promised&lt;/strong&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I was no fan of Robert Martin, perhaps because I wrongly associated him with excessive “bureaucracy” in software engineering, but it’s clear I was wrong, because &lt;a href=&#34;http://www.infoq.com/presentations/history-future-programming-languages&#34;&gt;&lt;em&gt;this&lt;/em&gt;&lt;/a&gt; is a &lt;em&gt;great&lt;/em&gt; talk, and is one of the few people (other than, say, Alan Kay), who’ve made this connection between the changes in the “culture” of software development and its “popularization”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=K13_sWm_gZw&#34;&gt;This talk&lt;/a&gt; by John McCarthy wasn’t particularly interesting, except for a choice quote that’s sure to offend certain “GPL fundamentalists” out there:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I think that &lt;strong&gt;Richard Stallman who has been a hero in many respects, has been a negative force in his view that anything/everything should be free and no one should have to pay for anything unless Stallman would think of a mechanism&lt;/strong&gt; … where my daughter who is a professional writer would still be able to make money.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Daniel Spiewak talks about &lt;a href=&#34;http://www.infoq.com/presentations/post-functional-scala-clojure-haskell&#34;&gt;“Living in a Post-Functional World”&lt;/a&gt;. I thought this would be meh, but turned out to be very insightful, and also indicates how close FP and OO really are. More to the point, &lt;strong&gt;since modularity is non-negotiable, any solution to the problem of modularity drags in OO-ish stuff into an FP language&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Someone (thanks, @Beobachter!) suggested using &lt;a href=&#34;http://learn.getgrav.org/basics/what-is-grav&#34;&gt;&lt;em&gt;Grav&lt;/em&gt;&lt;/a&gt;, an intermediate alternative to a fully-static blog (what I have right now), and a fully-dynamic one (e.g. Wordpress), but I’ve been too lazy to investigate how to make the switch.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Here is a (very, very humorous!) piece in The Register, &lt;a href=&#34;http://www.theregister.co.uk/2016/01/13/stob_remember_the_monoids/&#34;&gt;&lt;em&gt;”Learn you Func Prog on five minute quick!”&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The object-oriented era of coding is at last drawing to an inevitable and shameful close. We can – and we must! – all join hands and skip gaily into a brave new world, where sloppy state and careless side effects are excised without ruth.&lt;/p&gt;

&lt;p&gt;Now every program, from humble Android applet to mighty engine-pollution-test-falsifier, must slough off ridiculous trappings and clumsy complexities of objectivity, and float elegantly forwards down the shiny new functional pipeline – the one, true alimentary canal of code to concurrent computing paradise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, Gilad Bracha’s &lt;a href=&#34;http://www.amazon.com/Dart-Programming-Language-Gilad-Bracha/dp/0321927702?tag=duckduckgo-osx-20&#34;&gt;new book&lt;/a&gt; is very enticing; I’ve placed it on my “soon-to-read-unless-I’m-lying-to-myself-about-my-available-free-time” list, and so should you.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>considering moving away from a static blog dot dot dot</title>
      <link>http://agam.github.io/post/2016/02/08/considering-moving-away-from-a-static-blog-dot-dot-dot/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://agam.github.io/post/2016/02/08/considering-moving-away-from-a-static-blog-dot-dot-dot/</guid>
      <description>&lt;p&gt;This blog has been my longest continuous online presence (beginning as a &lt;em&gt;Hakyll&lt;/em&gt; blog in 2012 before switching to &lt;em&gt;Jekyll&lt;/em&gt; (well, &lt;em&gt;Octopress&lt;/em&gt;) about a year later). I liked the whole &amp;ldquo;edit in markdown in a terminal and use &lt;code&gt;git&lt;/code&gt; for everything&amp;rdquo; flow.&lt;/p&gt;

&lt;p&gt;Unfortunately, time is scarcer now, my free time is less structured, and I often find myself away from an actual terminal, though equipped with a capable smartphone. For my &lt;a href=&#34;https://abacusnoirform.wordpress.com&#34;&gt;more-general-purpose blog&lt;/a&gt;, I used Wordpress and it&amp;rsquo;s worked out pretty well so far, because I can &amp;ldquo;write on the go&amp;rdquo;, and I&amp;rsquo;d like to be able to do the same for this blog too.&lt;/p&gt;

&lt;p&gt;So I haven&amp;rsquo;t decided exactly how and when to migrate (because hey, I do want to keep what I have) to a &amp;ldquo;dynamic blog&amp;rdquo; (funny phrase, that), but I definitely want to do it sometime this year.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>